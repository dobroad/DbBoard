package com.lee.board;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.lee.board.Article;

public class Main {
	// 리팩토링 하기 전 
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		while (true) {
			System.out.printf("명령어) ");
			String cmd = input.nextLine();
			cmd = cmd.trim(); // 공백제거

			if (cmd.equals("article write")) { // cmd.equals => 문장비교

				String title;
				String body;

				System.out.println("== 게시글 작성 ==");
				System.out.printf("제목: ");
				title = input.nextLine();
				System.out.printf("내용: ");
				body = input.nextLine();

				Connection conn = null; // DB 접속 객체
				PreparedStatement pstat = null; // SQL 구문을 실행하는 역할

				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					String url = "jdbc:mysql://127.0.0.1:3306/text_board?useUnicode=true&characterEncoding=utf8&autoReconnect=true&serverTimezone=Asia/Seoul&useOldAliasMetadataBehavior=true&zeroDateTimeNehavior=convertToNull";

					conn = DriverManager.getConnection(url, "root", "");

					String sql = "INSERT INTO article";
					sql += " SET regDate = NOW()";// 앞에 스페이스!!!
					sql += ", updateDate = NOW()";
					sql += ", title = \"" + title + "\""; // 쌍따옴표 쓸 때 앞에 역슬래쉬
					sql += ", body = \"" + body + "\"";

					pstat = conn.prepareStatement(sql);
					int affectedRows = pstat.executeUpdate(); // 실행된 쿼리가 몇개인지 정수로 반환

					System.out.println("affectedRows: " + affectedRows);

				} catch (ClassNotFoundException e) {
					System.out.println("드라이버 로딩 실패");
				} catch (SQLException e) {
					System.out.println("에러: " + e);
				} finally { // 예외 상황이든 아니든 무조건 마지막에 실행하는 finally
					try {
						if (conn != null && !conn.isClosed()) {
							conn.close(); // 연결 종료
						}
					} catch (SQLException e) {
						e.printStackTrace();
					}

					try {
						if (pstat != null && !pstat.isClosed()) {
							pstat.close(); // 연결 종료
						}
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}

			} else if (cmd.equals("article list")) { // cmd.equals => 문장비교
				List<Article> articles = new ArrayList<>(); // 출력용

				System.out.println("== 게시글 목록 ==");

				Connection conn = null;
				PreparedStatement pstat = null; // SQL 구문을 실행하는 역할
				ResultSet rs = null; // ResultSet은 executeQuery 쿼리의 결과값을 저장, next 함수를 통해 데이터를 참조

				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					String url = "jdbc:mysql://127.0.0.1:3306/text_board?useUnicode=true&characterEncoding=utf8&autoReconnect=true&serverTimezone=Asia/Seoul&useOldAliasMetadataBehavior=true&zeroDateTimeNehavior=convertToNull";

					conn = DriverManager.getConnection(url, "root", "");

					String sql = "SELECT * FROM article";
					sql += " ORDER BY id DESC"; // 앞에 띄어쓰기!!!

					pstat = conn.prepareStatement(sql);
					rs = pstat.executeQuery(sql);

					while (rs.next()) { // 데이터가 없을 때 까지 true 반환
						int id = rs.getInt("id");
						String regDate = rs.getString("regDate");
						String updateDate = rs.getString("updateDate");
						String title = rs.getString("title");
						String body = rs.getString("body");

						Article article = new Article(id, regDate, updateDate, title, body);
						articles.add(article); // add함수를 통해 운반객체들을 articles에 저장
					}

					if (articles.size() == 0) {
						System.out.println("게시물이 존재하지 않습니다.");
						continue; // 가장 위에있는 반복문 반복
					}

					System.out.println("번호 / 제목");
					for (Article article : articles) { // 운반객체 article 안에 있는 articles 처음부터 끝까지 조회
						System.out.printf("%d / %s\n", article.id, article.title);
					}

				} catch (ClassNotFoundException e) {
					System.out.println("드라이버 로딩 실패");
				} catch (SQLException e) {
					System.out.println("에러: " + e);
				} finally { // 예외 상황이든 아니든 무조건 마지막에 실행하는 finally
					try {
						if (conn != null && !conn.isClosed()) {
							conn.close(); // 연결 종료
						}
					} catch (SQLException e) {
						e.printStackTrace();
					}

					try {
						if (pstat != null && !pstat.isClosed()) {
							pstat.close(); // 연결 종료
						}
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}

			} else if (cmd.startsWith("article modify")) { // cmd.startsWith => 시작하는 문장 대조
				
				int id = Integer.parseInt(cmd.split(" ")[2].trim()); // cmd.split(" "); => article modify 명령어를 공백을 기준으로 나눠서 배열로 저장
															  		 // [2] => 공백을 기준으로 배열로 나누면 id가 들어가는 자리의 index
															         // .trim() => 공백 제거
				String title;
				String body;
				
				System.out.println("== 게시글 수정 ==");
				System.out.printf("새 제목: ");
				title = input.nextLine();
				System.out.printf("새 내용: ");
				body = input.nextLine();

				Connection conn = null; // DB 접속 객체
				PreparedStatement pstat = null; // SQL 구문을 실행하는 역할

				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					String url = "jdbc:mysql://127.0.0.1:3306/text_board?useUnicode=true&characterEncoding=utf8&autoReconnect=true&serverTimezone=Asia/Seoul&useOldAliasMetadataBehavior=true&zeroDateTimeNehavior=convertToNull";

					conn = DriverManager.getConnection(url, "root", "");
					
					String sql = "UPDATE article";
					sql += " SET regDate = now()";
					sql += ", updateDate = now()";
					sql += ", title = \"" + title + "\""; // 쌍따옴표 쓸 때 앞에 역슬래쉬
					sql += ", body = \"" + body + "\"";
					sql += " WHERE id =" + id;
					
					pstat = conn.prepareStatement(sql);
					pstat.executeUpdate();

				} catch (ClassNotFoundException e) {
					System.out.println("드라이버 로딩 실패");
				} catch (SQLException e) {
					System.out.println("에러: " + e);
				} finally { // 예외 상황이든 아니든 무조건 마지막에 실행하는 finally
					try {
						if (conn != null && !conn.isClosed()) {
							conn.close(); // 연결 종료
						}
					} catch (SQLException e) {
						e.printStackTrace();
					}

					try {
						if (pstat != null && !pstat.isClosed()) {
							pstat.close(); // 연결 종료
						}
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}

			} else if (cmd.equals("system exit")) {
				System.out.println("프로그램을 종료합니다.");
				break;

			} else {
				System.out.println("잘못된 명령어입니다.");
			}
		}
	}
}
